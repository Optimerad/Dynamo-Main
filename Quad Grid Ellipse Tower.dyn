{
  "Uuid": "356c3e19-bbfb-4603-8f26-3eff824b0f27",
  "IsCustomNode": false,
  "Description": null,
  "Name": "Quad Grid Ellipse Tower",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.AdaptiveComponent.ByPoints@Autodesk.DesignScript.Geometry.Point[][],Revit.Elements.FamilyType",
      "Id": "9fee3f0559f8437c9abb83e33bbf42fd",
      "Inputs": [
        {
          "Id": "ac2dfc74a077466db9be6ea105cd785e",
          "Name": "points",
          "Description": "a two-dimensional array of points\n\nPoint[][]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2e3d0abb8b494fddb224a7bf4b59133c",
          "Name": "familyType",
          "Description": "a family type to use to create the adaptive components\n\nFamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "17a8985ecd9a4e78b5cf51e116460bee",
          "Name": "AdaptiveComponent[]..[]",
          "Description": "AdaptiveComponent[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a list of adaptive components from two-dimensional array of points\n\nAdaptiveComponent.ByPoints (points: Point[][], familyType: FamilyType): AdaptiveComponent[]..[]"
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 167,
      "SelectedString": "Quad-Tri:Quad-Tri",
      "NodeType": "ExtensionNode",
      "Id": "a48a39d420e94d27b2a695887d6909a9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c413fb1124464393886f66513b5f20d2",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All family types available in the document."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.ByCoordinates@double,double,double",
      "Id": "a63a032f82e3402888417962db126c3a",
      "Inputs": [
        {
          "Id": "dc9e6c554e054ba8a2a518663ff2c852",
          "Name": "x",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9735c5f55b9e4492904caedf9fdc2d9e",
          "Name": "y",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "692b04f51cc54e508a042fffe1d214e1",
          "Name": "z",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3ea5e67f58ec46d18097ebbf09df2e40",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Form a Point given 3 cartesian coordinates\n\nPoint.ByCoordinates (x: double = 0, y: double = 0, z: double = 0): Point"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 16,
      "MaximumValue": 20,
      "MinimumValue": 2,
      "StepValue": 1,
      "Id": "9719583d9db145fab19ccd8574cd6a28",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6a57622ae39248b2b90aec8f35a0c116",
          "Name": "",
          "Description": "Int32",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 3400,
      "MaximumValue": 5000,
      "MinimumValue": 2500,
      "StepValue": 100,
      "Id": "abb1a9c1cf6247d0aed27ee18b13d2e0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c38125482a2f41f7a9b53afe782c8090",
          "Name": "",
          "Description": "Int32",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0..(n*h)..#(n+1);",
      "Id": "6572a00bed6b49349a42dedacc2c2fd8",
      "Inputs": [
        {
          "Id": "634648da87cf462ca7042d5acbaac639",
          "Name": "n",
          "Description": "n",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "677dab7aae15410992705316e51a0975",
          "Name": "h",
          "Description": "h",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4c04f88fa78b454a834b8ea5e3e042df",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 8100,
      "MaximumValue": 15000,
      "MinimumValue": 3000,
      "StepValue": 300,
      "Id": "1b73692790354300944c43e947543fb8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "50db5b4f523e42a1bc989fbd69c5e27a",
          "Name": "",
          "Description": "Int32",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 32,
      "MaximumValue": 100,
      "MinimumValue": 6,
      "StepValue": 1,
      "Id": "5426bd88bd9041d693cc4146699a7151",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "68f07ff2c09f4030ac14817077e3c2f4",
          "Name": "",
          "Description": "Int32",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0..1..#n;",
      "Id": "58b4f8b1bb554b929847bda0ac4e4183",
      "Inputs": [
        {
          "Id": "563e4ab85bd9493b82307bb64cfc69f2",
          "Name": "n",
          "Description": "n",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d3e636f825ad48a6bb185cb450df78ac",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0..n..#n+1;",
      "Id": "5a78fb4189e443be8ac7e9f787cc5c70",
      "Inputs": [
        {
          "Id": "23b73da003c9470b872cc14ebec66c95",
          "Name": "n",
          "Description": "n",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fb85d72344164e67bdaac4eb7a55bd8d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "8419106e6b7746489e1d8963e10fe67a",
      "Inputs": [
        {
          "Id": "83424e381c284764a99b75eca8f40af0",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d1c8c8ef77c6485d9b48612de402ff15",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "543f56eeaab74fa8bc5aba8028dac734",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "n;",
      "Id": "a11fc43678db45f093752d0c29e4adc6",
      "Inputs": [
        {
          "Id": "19cf20e3fcec4537805dce63faa63fec",
          "Name": "n",
          "Description": "n",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2e7086dacfde42aa9d8ff3d855eced30",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\nlistOfPointLists = IN[0]\r\n\r\nlistsOfPairs = []\r\nfor ListOfPoints in listOfPointLists:\r\n    onePair = []\r\n    for pointIndex in range(len(ListOfPoints)):\r\n        onePair.append([ListOfPoints[pointIndex - 1], ListOfPoints[pointIndex]])\r\n    listsOfPairs.append(onePair)\r\n\r\n\r\nlistOfQuads = []\r\nfor IndexOfPairList in range(len(listsOfPairs)):\r\n    for pairListIndex in range(len(listsOfPairs[IndexOfPairList])):\r\n        oneQuad = []\r\n        for point in listsOfPairs[IndexOfPairList][pairListIndex]:\r\n            oneQuad.append(point)\r\n        for point in reversed(listsOfPairs[IndexOfPairList - 1][pairListIndex]):\r\n            oneQuad.append(point)\r\n        listOfQuads.append(oneQuad)\r\n\r\nOUT=listOfQuads\r\n# Assign your output to the OUT variable.",
      "VariableInputPorts": true,
      "Id": "6c1f711eb7074d6987d306715b9883bd",
      "Inputs": [
        {
          "Id": "29606357eb1b45ee9f4046a2fe88b087",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "59c2cd9777bd49f09061885a7154c7cf",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 12000,
      "MaximumValue": 15000,
      "MinimumValue": 3000,
      "StepValue": 300,
      "Id": "ac2e5f6ce2e1422d83a3e0e32bbe4d26",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2ba94d1ae8a0497a976f2c1b210e3d2a",
          "Name": "",
          "Description": "Int32",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a..b..#(n+1);",
      "Id": "8e68ad3980254d979a6a0543c5843306",
      "Inputs": [
        {
          "Id": "81ed8252e94c40cd9053979e924a0815",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "129b0978f66c4d2cbb14f8342a660795",
          "Name": "b",
          "Description": "b",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "58a137ab2d2d483ca164e986e5995f37",
          "Name": "n",
          "Description": "n",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1943ead0b97b41c4911e79274d43dd73",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Rotate@Autodesk.DesignScript.Geometry.Plane,double",
      "Id": "37778b05232f4fb6b0bf3e7e536e7da0",
      "Inputs": [
        {
          "Id": "9d5c3af42829411abd3af7293183974e",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cf3fe913278a48bfa697b033cab9e54d",
          "Name": "basePlane",
          "Description": "Plane",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "16ade57ab3aa479e9bcc290ec5e1a124",
          "Name": "degrees",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "188b606dcf7648029be4acf7ba4c5bca",
          "Name": "Geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Rotates an object around the Plane origin and normal by a specified degree\n\nGeometry.Rotate (basePlane: Plane, degrees: double = 0): Geometry"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 7,
      "MaximumValue": 30,
      "MinimumValue": 0,
      "StepValue": 1,
      "Id": "d07b03ef25974dd081fce2191e4fb47f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7afcd3d25dd84fffbd6993da5a3da518",
          "Name": "",
          "Description": "Int32",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Plane.ByOriginNormal@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector",
      "Id": "d02b90fe8e4b48ee95360da0d62f01c5",
      "Inputs": [
        {
          "Id": "492856f309c640dcac905d9f469c8a6a",
          "Name": "origin",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c1bdfbeb7faf4056a5762c758d34ab7c",
          "Name": "normal",
          "Description": "Vector\nDefault value : Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c75e6421618a4508b1f6a8a6e0741d26",
          "Name": "Plane",
          "Description": "Plane",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Plane centered at root Point, with input normal Vector.\n\nPlane.ByOriginNormal (origin: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), normal: Vector = Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)): Plane"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.ZAxis",
      "Id": "f720469f2cd94c77a6b8ba9f8a69d282",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1828bfde80d944dd8e07c04e9c79f313",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the canonical Z axis Vector (0,0,1)\n\nVector.ZAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0..R*n..#(n+1);",
      "Id": "fc681d356c164f74b9c12b6980fea0df",
      "Inputs": [
        {
          "Id": "1efc68c20b6a410eb774abc145352606",
          "Name": "R",
          "Description": "R",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e040eea688fa4682b7964059bad47f06",
          "Name": "n",
          "Description": "n",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "02d18b54fda741f588ca25cfd322500c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Ellipse.ByCoordinateSystemRadii@Autodesk.DesignScript.Geometry.CoordinateSystem,double,double",
      "Id": "63b87f0f4c80457e9f399a91870c9bac",
      "Inputs": [
        {
          "Id": "c857bbf7a9e44ffd83eadb569b61cca2",
          "Name": "origin",
          "Description": "CoordinateSystem\nDefault value : Autodesk.DesignScript.Geometry.CoordinateSystem.ByOrigin(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c814ad49d8dc49eeb5172b8196963fd1",
          "Name": "xAxisRadius",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5c983341f49f4056a0d5957972a9dec6",
          "Name": "yAxisRadius",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "72658d8f7881460699c02042f0798805",
          "Name": "Ellipse",
          "Description": "Ellipse",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create an Ellipse centered and aligned with input CoordinateSystem, with a x_radius radius in the CS X direction, and y_radius radius in the CS Y direction.\n\nEllipse.ByCoordinateSystemRadii (origin: CoordinateSystem = Autodesk.DesignScript.Geometry.CoordinateSystem.ByOrigin(0, 0, 0), xAxisRadius: double = 1, yAxisRadius: double = 1): Ellipse"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.CoordinateSystem.ByPlane@Autodesk.DesignScript.Geometry.Plane",
      "Id": "0f7841590c1446169f326fd72b2f2a0a",
      "Inputs": [
        {
          "Id": "f739790da1184e9abba535c5fd55961d",
          "Name": "plane",
          "Description": "Plane\nDefault value : Autodesk.DesignScript.Geometry.Plane.XY()",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3138fcf66667441987f0f1131146cf58",
          "Name": "CoordinateSystem",
          "Description": "CoordinateSystem",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a CoordinateSystem with origin equal to input Plane origin, and X and Y axes lying in the Plane, aligned with Plane X and Y axes.\n\nCoordinateSystem.ByPlane (plane: Plane = Autodesk.DesignScript.Geometry.Plane.XY()): CoordinateSystem"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 100.0,
      "MinimumValue": 50.0,
      "StepValue": 1.0,
      "InputValue": 68.0,
      "Id": "c4ef9d8b27894e17829a6359cb8ad56a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "de41d8114a1e4dac82acc38b6549686b",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Curve.PointAtParameter@double",
      "Id": "f67e7cae15654a0386b3e9e4f3f7803c",
      "Inputs": [
        {
          "Id": "6f0718ea3ab749f99a8f2faf6177a50a",
          "Name": "curve",
          "Description": "Autodesk.DesignScript.Geometry.Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dd8a64aa286042baa952b81e30dec4de",
          "Name": "param",
          "Description": "The parameter at which to evaluate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1f1dc2c83d7b439fbfa3ef99984e64bb",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "CrossProduct",
      "Description": "Get a Point on the Curve at a specified parameter between StartParameter() and EndParameter()\n\nCurve.PointAtParameter (param: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x..(x*p/100)..#(n+1);",
      "Id": "3340a3d4b6584342bcd68b0ab1cc5c41",
      "Inputs": [
        {
          "Id": "464045ea5faf48c8aa511d15433669bf",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e0c9deb4b7d2414d9065b78bb7ee87d0",
          "Name": "p",
          "Description": "p",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9ab8badc7b58442ab45d14baead201d7",
          "Name": "n",
          "Description": "n",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ee414fd92eaf417e81c26f303ca09e78",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "y..(y*p/100)..#(n+1);",
      "Id": "a21b47a1e0ca45ad956e0a87181d0d7f",
      "Inputs": [
        {
          "Id": "67f60933a7984dc592494075d409a714",
          "Name": "y",
          "Description": "y",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cbdb4a7b9b7442f799f3de121eeb5f53",
          "Name": "p",
          "Description": "p",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "13e4630c7281485794135992a25a7ae6",
          "Name": "n",
          "Description": "n",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b0a34912dd5347778d377ec7a1f7e2b9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "DSRevitNodesUI.FloorTypes, DSRevitNodesUI",
      "SelectedIndex": 8,
      "SelectedString": "Insitu Concrete 225mm",
      "NodeType": "ExtensionNode",
      "Id": "a21fb016ba97458990c6aee39b33dcd7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "20caff1daa1d45de935509a13a778915",
          "Name": "Floor Type",
          "Description": "The selected Floor Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All floor types available in the document."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Floor.ByOutlineTypeAndLevel@Autodesk.DesignScript.Geometry.Curve[],Revit.Elements.FloorType,Revit.Elements.Level",
      "Id": "60f6cd78c94142af827406443e6badd4",
      "Inputs": [
        {
          "Id": "22c6a884d4f744388b80dec8b1c9ae6e",
          "Name": "outlineCurves",
          "Description": "Curve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0b5c8ea0b38e4debb9935f29b96c77df",
          "Name": "floorType",
          "Description": "FloorType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8152b81a9bf242ddbdc9926f8beff995",
          "Name": "level",
          "Description": "Level",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5b4b0a2225ab495cac348914e1d123ab",
          "Name": "Floor",
          "Description": "The floor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "CrossProduct",
      "Description": "Create a Revit Floor given its curve outline and Level\n\nFloor.ByOutlineTypeAndLevel (outlineCurves: Curve[], floorType: FloorType, level: Level): Floor"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Level.ByElevation@double",
      "Id": "e9b8f1c74a204b8b9556ccb8ea3f3b1e",
      "Inputs": [
        {
          "Id": "ba0df069b8704bbda601487662879f1e",
          "Name": "elevation",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "653bcc5d88054a0e8346adbca51b8e61",
          "Name": "Level",
          "Description": "Level",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Revit Level given it's elevation. The name will be whatever Revit gives it.\n\nLevel.ByElevation (elevation: double): Level"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Curve.Offset@double",
      "Id": "e8563e77c4764b4cbe1d490a187f0a18",
      "Inputs": [
        {
          "Id": "37850d52fcc1426a969c483d7c5afbab",
          "Name": "curve",
          "Description": "Autodesk.DesignScript.Geometry.Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ae580a7a68784426a310102a3afd9f00",
          "Name": "distance",
          "Description": "A positive or negative distance to offset\n\ndouble\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8bf446a0c05f45059d44631f1d4c0d11",
          "Name": "Curve",
          "Description": "new offsetted curves",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Offset a Curve by a specified amount. Curve must be planar, and, if a BSplineCurve/NurbsCurve, must have degree > 1.\n\nCurve.Offset (distance: double = 1): Curve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "-100;",
      "Id": "4924612a06d54962ac5391c41ad173f7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d910880d3e5344328a8aee397b3ed0e3",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0..n*h..#(n+1);",
      "Id": "4a15fe2689094cd9a99ead51ceedef8a",
      "Inputs": [
        {
          "Id": "1e67d7402201433fab2813457203efba",
          "Name": "n",
          "Description": "n",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "54b23f6c2ea24473a63ab203c112d379",
          "Name": "h",
          "Description": "h",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cd84c76c791a46c5b5390684f0e57eb8",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "4928bf8323c045429738270ce4f4cf7e",
      "Inputs": [
        {
          "Id": "a11667be0568462083f0f4f176a73b9f",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5d0b75a0e31d49e2b9b1a746be74b581",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7d4a9d823e344f709968bc8c3e19ef0e",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "2;",
      "Id": "10fe0384533940c6884c9b442852c7bc",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c1953a6acf5f46ab89877b93c676e33f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolyCurve.ByPoints@Autodesk.DesignScript.Geometry.Point[],bool",
      "Id": "7dc361d5470049418d18e1e2b4d6a89f",
      "Inputs": [
        {
          "Id": "9fd10633d2d94823a28df2f4d4155cbd",
          "Name": "points",
          "Description": "Points to make polycurve\n\nPoint[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c49bb27d174b4ca79ece4797e589c6ec",
          "Name": "connectLastToFirst",
          "Description": "make close or open polycurve\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d1d68644511747a7a92615ddc3e4fda1",
          "Name": "PolyCurve",
          "Description": "PolyCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Make PolyCurve by connecting points. Set the 'connectLastToFirst' input to true to close the PolyCurve.\n\nPolyCurve.ByPoints (points: Point[], connectLastToFirst: bool = false): PolyCurve"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "6a1569dede374804992273cd7dcb6456",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b32c0118087f4486a92f71c76749a14d",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolyCurve.CloseWithLine",
      "Id": "065c8d59bb3a4ad3a3362760aa188fc9",
      "Inputs": [
        {
          "Id": "cdd603662204458e8e6aa017b7f9beab",
          "Name": "polyCurve",
          "Description": "Autodesk.DesignScript.Geometry.PolyCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "24475c85354045f8a382a237d2724f4c",
          "Name": "PolyCurve",
          "Description": "PolyCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Close polycurve by line connecting start and end points\n\nPolyCurve.CloseWithLine ( ): PolyCurve"
    }
  ],
  "Connectors": [
    {
      "Start": "c413fb1124464393886f66513b5f20d2",
      "End": "2e3d0abb8b494fddb224a7bf4b59133c",
      "Id": "26812cb090f34d0db7ef9e1dcbfaca73"
    },
    {
      "Start": "3ea5e67f58ec46d18097ebbf09df2e40",
      "End": "492856f309c640dcac905d9f469c8a6a",
      "Id": "1bb44602742745b89eaced4b24669ff9"
    },
    {
      "Start": "6a57622ae39248b2b90aec8f35a0c116",
      "End": "634648da87cf462ca7042d5acbaac639",
      "Id": "1ad70ec2a975463d8fa041ba4cccf11f"
    },
    {
      "Start": "6a57622ae39248b2b90aec8f35a0c116",
      "End": "23b73da003c9470b872cc14ebec66c95",
      "Id": "fab6412850524d0688c7dba030c8d777"
    },
    {
      "Start": "6a57622ae39248b2b90aec8f35a0c116",
      "End": "58a137ab2d2d483ca164e986e5995f37",
      "Id": "8b4d5c1e41d54d08bfeebc09523995d9"
    },
    {
      "Start": "6a57622ae39248b2b90aec8f35a0c116",
      "End": "e040eea688fa4682b7964059bad47f06",
      "Id": "0c04690b1e004ddc8b014a3fe05c6f86"
    },
    {
      "Start": "6a57622ae39248b2b90aec8f35a0c116",
      "End": "9ab8badc7b58442ab45d14baead201d7",
      "Id": "df587338a4a14289af5ae93b7eadb06c"
    },
    {
      "Start": "6a57622ae39248b2b90aec8f35a0c116",
      "End": "13e4630c7281485794135992a25a7ae6",
      "Id": "1aecf1239a4348099dbe2b13ed93ca3a"
    },
    {
      "Start": "6a57622ae39248b2b90aec8f35a0c116",
      "End": "1e67d7402201433fab2813457203efba",
      "Id": "1c722bcc9a704459a57fe8b7a8b7d475"
    },
    {
      "Start": "c38125482a2f41f7a9b53afe782c8090",
      "End": "677dab7aae15410992705316e51a0975",
      "Id": "f0cf3a61d6114cfc919c5ccacdf95ea6"
    },
    {
      "Start": "c38125482a2f41f7a9b53afe782c8090",
      "End": "54b23f6c2ea24473a63ab203c112d379",
      "Id": "8499685907fa40a2acdc52993f5000dc"
    },
    {
      "Start": "4c04f88fa78b454a834b8ea5e3e042df",
      "End": "692b04f51cc54e508a042fffe1d214e1",
      "Id": "b5b585f7788241f4ace96bd76a45e1c8"
    },
    {
      "Start": "50db5b4f523e42a1bc989fbd69c5e27a",
      "End": "81ed8252e94c40cd9053979e924a0815",
      "Id": "16541a9978dc412da8b82009388ba255"
    },
    {
      "Start": "50db5b4f523e42a1bc989fbd69c5e27a",
      "End": "464045ea5faf48c8aa511d15433669bf",
      "Id": "c6ac66b2b2474e619f78be54ceaac9da"
    },
    {
      "Start": "68f07ff2c09f4030ac14817077e3c2f4",
      "End": "563e4ab85bd9493b82307bb64cfc69f2",
      "Id": "c53ad72c27a241f4a0e78fc0274f9ed6"
    },
    {
      "Start": "68f07ff2c09f4030ac14817077e3c2f4",
      "End": "19cf20e3fcec4537805dce63faa63fec",
      "Id": "e5cd9a6d106944229b5c56ff9984a86e"
    },
    {
      "Start": "d3e636f825ad48a6bb185cb450df78ac",
      "End": "dd8a64aa286042baa952b81e30dec4de",
      "Id": "8c3d18e837af41e98c169b4c68589470"
    },
    {
      "Start": "543f56eeaab74fa8bc5aba8028dac734",
      "End": "ac2dfc74a077466db9be6ea105cd785e",
      "Id": "89dd1cbf9dfe41bcb980befa112c5468"
    },
    {
      "Start": "2e7086dacfde42aa9d8ff3d855eced30",
      "End": "d1c8c8ef77c6485d9b48612de402ff15",
      "Id": "98896a8034284dc19772db40607d90b6"
    },
    {
      "Start": "59c2cd9777bd49f09061885a7154c7cf",
      "End": "83424e381c284764a99b75eca8f40af0",
      "Id": "324b7e25d78942438f2b2ae332730b5e"
    },
    {
      "Start": "2ba94d1ae8a0497a976f2c1b210e3d2a",
      "End": "129b0978f66c4d2cbb14f8342a660795",
      "Id": "7bb5dd284cd54cecba93ab857c56a1c0"
    },
    {
      "Start": "2ba94d1ae8a0497a976f2c1b210e3d2a",
      "End": "67f60933a7984dc592494075d409a714",
      "Id": "e4e4a718c9334a2485660b10a6996fec"
    },
    {
      "Start": "188b606dcf7648029be4acf7ba4c5bca",
      "End": "6f0718ea3ab749f99a8f2faf6177a50a",
      "Id": "e0f74c4e0b0c4283aa8faca6c325791f"
    },
    {
      "Start": "7afcd3d25dd84fffbd6993da5a3da518",
      "End": "1efc68c20b6a410eb774abc145352606",
      "Id": "4f78698e7483412dabe3d58ed268ccc5"
    },
    {
      "Start": "c75e6421618a4508b1f6a8a6e0741d26",
      "End": "f739790da1184e9abba535c5fd55961d",
      "Id": "a85e28ac9e914a68a25abdeb5b9d59e7"
    },
    {
      "Start": "c75e6421618a4508b1f6a8a6e0741d26",
      "End": "cf3fe913278a48bfa697b033cab9e54d",
      "Id": "a9e276382ece4f30ad26b10ce789a5fa"
    },
    {
      "Start": "1828bfde80d944dd8e07c04e9c79f313",
      "End": "c1bdfbeb7faf4056a5762c758d34ab7c",
      "Id": "a113ec599b8a44b8b99ec3953adde028"
    },
    {
      "Start": "02d18b54fda741f588ca25cfd322500c",
      "End": "16ade57ab3aa479e9bcc290ec5e1a124",
      "Id": "14b490aa19fc4365ae54937b2aba0997"
    },
    {
      "Start": "72658d8f7881460699c02042f0798805",
      "End": "9d5c3af42829411abd3af7293183974e",
      "Id": "fdab0bce24f248e29de91d03745e2c7a"
    },
    {
      "Start": "3138fcf66667441987f0f1131146cf58",
      "End": "c857bbf7a9e44ffd83eadb569b61cca2",
      "Id": "5218571ae8a34f4db6a2657017a6901a"
    },
    {
      "Start": "de41d8114a1e4dac82acc38b6549686b",
      "End": "e0c9deb4b7d2414d9065b78bb7ee87d0",
      "Id": "7fc735ee4dac401da74ae2cf9084dd1b"
    },
    {
      "Start": "de41d8114a1e4dac82acc38b6549686b",
      "End": "cbdb4a7b9b7442f799f3de121eeb5f53",
      "Id": "2fa8fbd3623d49559016206a88f6b957"
    },
    {
      "Start": "1f1dc2c83d7b439fbfa3ef99984e64bb",
      "End": "29606357eb1b45ee9f4046a2fe88b087",
      "Id": "c1dfed125d714b079ce279656e579e62"
    },
    {
      "Start": "1f1dc2c83d7b439fbfa3ef99984e64bb",
      "End": "9fd10633d2d94823a28df2f4d4155cbd",
      "Id": "231e810f74f043cda439a3fd699f9831"
    },
    {
      "Start": "ee414fd92eaf417e81c26f303ca09e78",
      "End": "c814ad49d8dc49eeb5172b8196963fd1",
      "Id": "605895c6749348b6b2a0a96898b8260c"
    },
    {
      "Start": "b0a34912dd5347778d377ec7a1f7e2b9",
      "End": "5c983341f49f4056a0d5957972a9dec6",
      "Id": "815190f7b83848f4a00935f91f877b31"
    },
    {
      "Start": "20caff1daa1d45de935509a13a778915",
      "End": "0b5c8ea0b38e4debb9935f29b96c77df",
      "Id": "ea44ac1e39f242a4ac47acc48eb0a05c"
    },
    {
      "Start": "653bcc5d88054a0e8346adbca51b8e61",
      "End": "8152b81a9bf242ddbdc9926f8beff995",
      "Id": "f38e5ab6b6a7407d8440eb6a1d6dd9b5"
    },
    {
      "Start": "8bf446a0c05f45059d44631f1d4c0d11",
      "End": "a11667be0568462083f0f4f176a73b9f",
      "Id": "767651a686604d7094acf8eb61de9df8"
    },
    {
      "Start": "d910880d3e5344328a8aee397b3ed0e3",
      "End": "ae580a7a68784426a310102a3afd9f00",
      "Id": "07233b74c69148f7adf6b593ef6a75d8"
    },
    {
      "Start": "cd84c76c791a46c5b5390684f0e57eb8",
      "End": "ba0df069b8704bbda601487662879f1e",
      "Id": "e82cdd3de89e4133ad863027a4d471ba"
    },
    {
      "Start": "7d4a9d823e344f709968bc8c3e19ef0e",
      "End": "22c6a884d4f744388b80dec8b1c9ae6e",
      "Id": "da2f96bc47794bcf8ba01bab46dc28c8"
    },
    {
      "Start": "c1953a6acf5f46ab89877b93c676e33f",
      "End": "5d0b75a0e31d49e2b9b1a746be74b581",
      "Id": "58dea801f9ed4b49a72d062ac520b7e8"
    },
    {
      "Start": "d1d68644511747a7a92615ddc3e4fda1",
      "End": "cdd603662204458e8e6aa017b7f9beab",
      "Id": "1870c77bdb16487fa36180bcdc672a50"
    },
    {
      "Start": "b32c0118087f4486a92f71c76749a14d",
      "End": "c49bb27d174b4ca79ece4797e589c6ec",
      "Id": "bfa3ff8264034c27b7ac650c88d3469d"
    },
    {
      "Start": "24475c85354045f8a382a237d2724f4c",
      "End": "37850d52fcc1426a969c483d7c5afbab",
      "Id": "37d993a6fc384e529572b80b9aa2cf18"
    }
  ],
  "Dependencies": [],
  "Bindings": [
    {
      "NodeId": "9fee3f05-59f8-437c-9abb-83e33bbf42fd",
      "Binding": {
        "ByPoints_InClassDecl-1_InFunctionScope-1_Instance0_9fee3f05-59f8-437c-9abb-83e33bbf42fd": ""
      }
    },
    {
      "NodeId": "60f6cd78-c941-42af-8274-06443e6badd4",
      "Binding": {
        "ByOutlineTypeAndLevel_InClassDecl-1_InFunctionScope-1_Instance0_60f6cd78-c941-42af-8274-06443e6badd4": ""
      }
    },
    {
      "NodeId": "e9b8f1c7-4a20-4b8b-9556-ccb8ea3f3b1e",
      "Binding": {
        "ByElevation_InClassDecl-1_InFunctionScope-1_Instance0_e9b8f1c7-4a20-4b8b-9556-ccb8ea3f3b1e": ""
      }
    }
  ],
  "View": {
    "Dynamo": {
      "ScaleFactor": 100.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.1.0.7500",
      "RunType": "Automatic",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": 3096.7925683579392,
      "EyeY": 56854.53145789649,
      "EyeZ": -54735.952352409222,
      "LookX": -1076.5524989398923,
      "LookY": -49874.8621723774,
      "LookZ": 51853.584081973939,
      "UpX": -0.01084545951068328,
      "UpY": 0.85264016435410184,
      "UpZ": 0.52238599343611225
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "AdaptiveComponent.ByPoints",
        "Id": "9fee3f0559f8437c9abb83e33bbf42fd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3169.1764424855805,
        "Y": 1467.4148938517392
      },
      {
        "ShowGeometry": true,
        "Name": "Family Types",
        "Id": "a48a39d420e94d27b2a695887d6909a9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 149.20002840857887,
        "Y": 1510.2552310119459
      },
      {
        "ShowGeometry": true,
        "Name": "Point.ByCoordinates",
        "Id": "a63a032f82e3402888417962db126c3a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 780.17644248558065,
        "Y": 1238.9148938517392
      },
      {
        "ShowGeometry": true,
        "Name": "no Levels",
        "Id": "9719583d9db145fab19ccd8574cd6a28",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 82.4279830278623,
        "Y": 1307.745317200294
      },
      {
        "ShowGeometry": true,
        "Name": "level height",
        "Id": "abb1a9c1cf6247d0aed27ee18b13d2e0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 81.265865904424061,
        "Y": 1408.3799474418004
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "6572a00bed6b49349a42dedacc2c2fd8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 490.17644248558065,
        "Y": 1295.1282271850723
      },
      {
        "ShowGeometry": true,
        "Name": "Building Radius (xAxis)",
        "Id": "1b73692790354300944c43e947543fb8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 78.694751115644181,
        "Y": 928.93875954052282
      },
      {
        "ShowGeometry": true,
        "Name": "no Segments around radius",
        "Id": "5426bd88bd9041d693cc4146699a7151",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 76.21303585609212,
        "Y": 842.98766043577086
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "58b4f8b1bb554b929847bda0ac4e4183",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2029.1764424855805,
        "Y": 1523.6282271850725
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "5a78fb4189e443be8ac7e9f787cc5c70",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3169.1764424855805,
        "Y": 1358.4148938517392
      },
      {
        "ShowGeometry": true,
        "Name": "List.DropItems",
        "Id": "8419106e6b7746489e1d8963e10fe67a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2885.1764424855805,
        "Y": 1467.4148938517392
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "a11fc43678db45f093752d0c29e4adc6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2661.1764424855805,
        "Y": 1536.6282271850723
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "6c1f711eb7074d6987d306715b9883bd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2661.1764424855805,
        "Y": 1428.4148938517392
      },
      {
        "ShowGeometry": true,
        "Name": "Building Radius (yAxis)",
        "Id": "ac2e5f6ce2e1422d83a3e0e32bbe4d26",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 77.531865606282963,
        "Y": 1015.8872985732446
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "8e68ad3980254d979a6a0543c5843306",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3169.1764424855805,
        "Y": 1222.4148938517392
      },
      {
        "ShowGeometry": true,
        "Name": "Geometry.Rotate",
        "Id": "37778b05232f4fb6b0bf3e7e536e7da0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2029.1764424855805,
        "Y": 1363.4148938517392
      },
      {
        "ShowGeometry": true,
        "Name": "Rotation per level",
        "Id": "d07b03ef25974dd081fce2191e4fb47f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 78.347302152677287,
        "Y": 1191.0576875545528
      },
      {
        "ShowGeometry": true,
        "Name": "Plane.ByOriginNormal",
        "Id": "d02b90fe8e4b48ee95360da0d62f01c5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1038.1764424855805,
        "Y": 1305.9148938517392
      },
      {
        "ShowGeometry": true,
        "Name": "Vector.ZAxis",
        "Id": "f720469f2cd94c77a6b8ba9f8a69d282",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 780.17644248558065,
        "Y": 1398.9148938517392
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "fc681d356c164f74b9c12b6980fea0df",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1699.1764424855805,
        "Y": 1471.6282271850723
      },
      {
        "ShowGeometry": false,
        "Name": "Ellipse.ByCoordinateSystemRadii",
        "Id": "63b87f0f4c80457e9f399a91870c9bac",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1699.1764424855805,
        "Y": 1311.4148938517392
      },
      {
        "ShowGeometry": true,
        "Name": "CoordinateSystem.ByPlane",
        "Id": "0f7841590c1446169f326fd72b2f2a0a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1335.1764424855805,
        "Y": 1222.4148938517392
      },
      {
        "ShowGeometry": true,
        "Name": "Top size (% of bottom)",
        "Id": "c4ef9d8b27894e17829a6359cb8ad56a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 80.4275449492502,
        "Y": 1100.2289668237077
      },
      {
        "ShowGeometry": true,
        "Name": "Curve.PointAtParameter",
        "Id": "f67e7cae15654a0386b3e9e4f3f7803c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2328.7201853957808,
        "Y": 1414.2324901104919
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "3340a3d4b6584342bcd68b0ab1cc5c41",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1335.1764424855805,
        "Y": 1330.6282271850725
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "a21b47a1e0ca45ad956e0a87181d0d7f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1335.1764424855805,
        "Y": 1467.6282271850725
      },
      {
        "ShowGeometry": true,
        "Name": "Floor Types",
        "Id": "a21fb016ba97458990c6aee39b33dcd7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2185.1604043199686,
        "Y": 1778.0696042168872
      },
      {
        "ShowGeometry": true,
        "Name": "Floor.ByOutlineTypeAndLevel",
        "Id": "60f6cd78c94142af827406443e6badd4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2661.8263555826838,
        "Y": 1719.22752967626
      },
      {
        "ShowGeometry": true,
        "Name": "Level.ByElevation",
        "Id": "e9b8f1c74a204b8b9556ccb8ea3f3b1e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2140.0241403399186,
        "Y": 1984.8609184002632
      },
      {
        "ShowGeometry": true,
        "Name": "Curve.Offset",
        "Id": "e8563e77c4764b4cbe1d490a187f0a18",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1511.413292541537,
        "Y": 1714.0349952101599
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "4924612a06d54962ac5391c41ad173f7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1376.9107552274481,
        "Y": 1748.2086525304492
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "4a15fe2689094cd9a99ead51ceedef8a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 686.0,
        "Y": 1756.0
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "4928bf8323c045429738270ce4f4cf7e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1970.3751082812391,
        "Y": 1699.2149408854555
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "10fe0384533940c6884c9b442852c7bc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1729.0,
        "Y": 1781.0
      },
      {
        "ShowGeometry": true,
        "Name": "PolyCurve.ByPoints",
        "Id": "7dc361d5470049418d18e1e2b4d6a89f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1588.8531478480033,
        "Y": 1920.9623980365154
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "6a1569dede374804992273cd7dcb6456",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1445.7542661402508,
        "Y": 2024.4191505996787
      },
      {
        "ShowGeometry": true,
        "Name": "PolyCurve.CloseWithLine",
        "Id": "065c8d59bb3a4ad3a3362760aa188fc9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1899.7750760215026,
        "Y": 1856.5961041339317
      }
    ],
    "Annotations": [
      {
        "Id": "f393d4cadedb4a77bd006f5b96c038dc",
        "Title": "Input\r\n",
        "Nodes": [
          "9719583d9db145fab19ccd8574cd6a28",
          "abb1a9c1cf6247d0aed27ee18b13d2e0",
          "1b73692790354300944c43e947543fb8",
          "5426bd88bd9041d693cc4146699a7151",
          "ac2e5f6ce2e1422d83a3e0e32bbe4d26",
          "d07b03ef25974dd081fce2191e4fb47f",
          "c4ef9d8b27894e17829a6359cb8ad56a",
          "a48a39d420e94d27b2a695887d6909a9"
        ],
        "Left": 66.21303585609212,
        "Top": 746.98766043577086,
        "Width": 325.21494717177018,
        "Height": 856.267570576175,
        "FontSize": 36.0,
        "InitialTop": 842.98766043577086,
        "InitialHeight": 611.57390008263485,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": -1187.2955357024816,
    "Y": -1838.9215428829434,
    "Zoom": 1.2797589700564833
  }
}